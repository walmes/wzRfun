% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/roxygen_documentation.R
\name{roxy_obj}
\alias{roxy_obj}
\alias{roxy_fun}
\alias{roxy_data}
\title{Builds the documentation in \code{roxygen2} based on object
    properties}
\usage{
roxy_fun(
  object,
  file,
  export = TRUE,
  author,
  keywords,
  extra,
  editor,
  print = FALSE,
  append = FALSE,
  find_file = FALSE
)

roxy_data(
  object,
  file,
  source = NULL,
  keywords,
  author,
  extra,
  editor,
  print = FALSE,
  append = FALSE,
  find_file = FALSE
)
}
\arguments{
\item{object}{An object that is a function.}

\item{file}{character[1] An optional file name to write the
documentation into. If it is not provided, the name of the
function is used to name the file. If \code{NA}, no file is
created and the documentation will be printed on console.}

\item{export}{logical[1] If \code{TRUE} means that the function will
be exported because the label \code{@export} will be added to the
documentation. Only has effect for \code{roxy_fun}.}

\item{author}{character[1] The author of the function to be assigned
to the \code{@author} field.}

\item{keywords}{character[>=1] Keywords to the function that will be
assigned to the \code{@keywords} field.}

\item{extra}{character[1] Additional information to be written, for
example \code{"@import lattice"}.}

\item{editor}{character[1] A name of an editor to open the file after
its creation. See \code{\link[utils]{edit}} for more details.}

\item{print}{logical[1] If \code{TRUE}, prints the skeleton in the
console.}

\item{append}{logical[1] If \code{TRUE} the documentation is appended
to the file informed.}

\item{find_file}{logical[1] If \code{TRUE}, shows the absolute path
to the file formatted for a call of \code{find-file} in Emacs
LISP, so the file can be opened just typing \code{C-x C-e} at the
end of the statement.}

\item{source}{character[1] A string that is the source of the
dataset. Only has effect for \code{roxy_data}.}
}
\value{
This function does not have return value. It only
    creates/modifies files and prints content.
}
\description{
This function gets a function and writes the skeleton of
    the documentation in roxygen syntax. The call of this function
    assumes that the working directory is a package directory, that
    is, where DESCRIPTION file is.
}
\examples{

\dontrun{

#-----------------------------------------
# Using roxy_fun().

fun <- function(x, y, ...) {
    return(x + y)
}

file.remove("bla.R")
file.remove("fun.R")

roxy_fun(fun)
roxy_fun(fun, append = TRUE)

file.remove("fun.R")
roxy_fun(fun, find_file = TRUE)

file.remove("fun.R")
roxy_fun(fun, editor = "emacs")

roxy_fun(fun, file = NA)

file.remove("fun.R")
roxy_fun(fun, print = TRUE)

file.remove("fun.R")
roxy_fun(fun, export = FALSE)

file.remove("fun.R")
roxy_fun(fun, author = "Walmes Zeviani, \\\\email{walmes@ufpr.br}.")

roxy_fun(fun, file = "bla.R")

file.remove("bla.R")
roxy_fun(fun, file = "bla.R", extra = "@import lattice")

file.remove("fun.R")
roxy_fun(object = fun, editor = "emacs")

}

\dontrun{

#-----------------------------------------
# Using roxy_data().

s <- "Smith; Sanders (1234)"
file.remove("iris.R")
roxy_data(iris,
          print = TRUE,
          source = s,
          editor = "emacs",
          keywords = c("BLA", "BLU"),
          find_file = TRUE,
          extra = c("@docType dataset",
                    "@details bla bla bla"))

}
}
\author{
Walmes Zeviani, \email{walmes@ufpr.br}.

Walmes Zeviani, \email{walmes@ufpr.br}.

Walmes Zeviani, \email{walmes@ufpr.br}.
}
